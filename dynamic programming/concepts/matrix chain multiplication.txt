Given a sequence of matrices, find the most efficient way to multiply these matrices together.
The problem is not actually to  perform the multiplications, but merely 
to decide in which order to perform the multiplications. 

problem statement: https://www.geeksforgeeks.org/matrix-chain-multiplication-dp-8/

A       B       C       D
2X5     5X20   20X10   10X13

FIND : A X B X C X D -> COST = MINIMUM (STEPS OF MULTIPLICATION)
eg: (AxB)xCxD or AxBxCxD or Ax((BxC)xD) whatever takes minimum steps is the answer

multiplication criteria b/w 2 matrices : a X b and c X d 
=> b = c and ans matrix = a X d
cost of multiplication i.e. no. of steps = a X b/c X d
eg: 2x3 and 3x6 : cost = 2x3x6 = 36 operations(multiplications)

Question format : 

arr[] : 40  20  30  10  30
        0   1   2    3  4
matrix dimensions will be: 
a1 = arr[0] x arr[1] = 40 x 20
a2 = 20 x 30
a3 = 30 x 10
a4 = 10 x 30
Ai = arr[i-1] x arr[i]

                          AxBxCxD
                      /            \
                Ax(BxCxD)          (AxB)(CxD) -> SIMILARLY OTHER POSSIBILITIES
               /        \           /       \
    MIN COST OF A      BxCxD        AxB     CxD
                      /      \
                     B        CxD

END MAI SBKA MINIMUM LETE JAENGE

=>mcm function : int solve(arr[],int i,int j)
        i -> right se start hoga , j -> left se start hoga

        Ai = arr[i-1] x arr[i] 
        if i=0 -> i-1 = -1 (not valid)
        for j => j = size - 1 (4) -> n-1 = 3 (valid)

    therefore, intilalize i=1 & j= size -1

=> base condition : if(i>=j) return 0; (i==j size 1 array to i-1[-1] nhi milega)



